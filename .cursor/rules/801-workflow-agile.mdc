---
description: ALWAYS use when executing any task to ensure proper integration of Agile, LDD, and automated rules
globs: **/*.{md,mdc}
priority: 1
version: 1.0.0
---
# 統合アジャイルワークフロー

## コアコンポーネント

### 1. アジャイルワークフロー構造
- Epics → Stories → Tasks → Subtasks
- `.ai/` ディレクトリでの管理
- 承認ベースの進行管理

### 2. ルールシステム
- `.cursor/rules/` での自動化ルール
- 優先度ベースの実行
- バージョン管理による進化

### 3. LDD（ロギングドリブン開発）
- `.logs/` でのログ管理
- 構造化されたログテンプレート
- フィードバックループの統合

### 4. メモリーバンク
- プロジェクト状態の追跡
- 学習内容の蓄積
- 最適化履歴の管理

## 統合ワークフロー

### フェーズ1: 初期化
1. 環境確認
   - `.ai/` ディレクトリの存在
   - 必要なテンプレートの配置
   - ルールファイルの検証

2. コンテキスト設定
   - プロジェクト情報の記録
   - 初期メトリクスの設定
   - ログ構造の確立

### フェーズ2: 計画
1. PRD作成/更新
   - 要件の定義
   - エピックの特定
   - 優先順位の設定

2. アーキテクチャ設計
   - 技術選定
   - 構造設計
   - 制約の定義

### フェーズ3: 実行
1. ストーリー管理
   - タスクの分解
   - 進捗の追跡
   - フィードバックの収集

2. 実装プロセス
   - テスト駆動開発
   - 継続的な検証
   - ドキュメント更新

### フェーズ4: 最適化
1. メトリクス分析
   - パフォーマンス評価
   - 品質指標の追跡
   - 効率性の測定

2. ルール調整
   - フィードバックの反映
   - 自動チューニング
   - バージョン更新

## 統合ルール

<rules>
1. すべてのタスクは適切なログエントリを持つ
2. フィードバックは即座にメモリーバンクに反映
3. ルールの更新は自動的に伝播
4. メトリクスは継続的に収集・分析
5. 最適化は定期的に実行
</rules>

## メトリクス定義

### 1. プロジェクトメトリクス
- エピック完了率
- ストーリー進捗状況
- タスク完了速度

### 2. 品質メトリクス
- テストカバレッジ
- コード品質スコア
- ドキュメント完全性

### 3. プロセスメトリクス
- フィードバックループ効率
- ルール最適化効果
- 学習率指標

## フィードバックループ

```mermaid
graph TD
    A[タスク実行] --> B[ログ記録]
    B --> C[メトリクス収集]
    C --> D[分析・評価]
    D --> E[ルール最適化]
    E --> F[メモリー更新]
    F --> A
```

## 最適化メカニズム

### 1. ルール最適化
- 使用頻度分析
- 効果測定
- 自動調整

### 2. プロセス最適化
- ボトルネック特定
- 効率化提案
- 自動化強化

### 3. コンテキスト最適化
- メモリー使用効率
- 学習効率
- フィードバック効率

<critical>
- すべてのコンポーネントは常に同期を維持
- 最適化は自動的かつ継続的に実行
- フィードバックは即座に反映
- メトリクスは常に最新を維持
</critical>